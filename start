#!/bin/bash
#Find available ports
port_b=8000
while [[ `netstat -taln | egrep $port_b` != "" ]]
do
  echo "Failed on port $port_b, trying another"
  port_b=$((port_b + 1))
done

port_f=9000
while [[ `netstat -taln | egrep $port_f` != "" ]]
do
  echo "Failed on port $port_f, trying another"
  port_f=$((port_f + 1))
done

#backend
cd ./backend 
echo "Started python virtual environment."
python3 -m venv venv
. venv/bin/activate
echo "Downloading backend requirements please wait..."
touch ./log.txt
pip install -r requirements.txt > ./log.txt 2>&1
if [[ $1 == "--new" ]]; then
    rm -f ./server/app.db
fi
python3 run.py $port_b > ./log.txt 2>&1 & pids=$!
echo "Backend server is now started."
echo "========== Servering backend on port $port_b =============="

# Frontend 
cd ../frontend
echo "Downloading frontend requirements please wait..."
touch ./log.txt
sed -i "s/localhost:[0-9]*/localhost:$port_b/" ./package.json
npm install > ./log.txt 2>&1
export PORT=$port_f
npm start > ./log.txt 2>&1 & pids+=" $!"
echo "Frontend server is now started."

# Pump data
cd ../backend
if [[ $1 == "--new" ]]; then
    echo "Populated sample data."
    python3 sampleData.py $port_b
fi

echo "========== Serving frontend at http://localhost:$port_f =============="
echo "Use Control-C to stop both frontend and backend."
trap "kill $pids" SIGTERM SIGINT
wait $pids